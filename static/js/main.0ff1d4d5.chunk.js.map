{"version":3,"sources":["logo.svg","Component/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","addTask","Items","id","uuid","v4","value","input","current","Date","toUTCString","localStorage","getItem","list","push","setItem","JSON","stringify","parse","setState","deleteItem","event","index","target","getAttribute","listValue","splice","update","React","createRef","state","window","parsedList","this","console","log","className","type","placeholder","ref","onClick","map","item","key","data-key","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,sLC0F5BC,G,kBAnFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,QAAQ,WAER,IAAMC,EAAM,CACJC,GAAGC,IAAKC,KACRC,MAAM,EAAKC,MAAMC,QAAQF,MACzBG,MAAM,IAAIA,MAAOC,eAGrB,GAAiC,MAA9BC,aAAaC,QAAQ,QAAc,CAClC,IAAMC,EAAK,GACXA,EAAKC,KAAKZ,GACVS,aAAaI,QAAQ,OAAOC,KAAKC,UAAUJ,QAE3C,CACA,IAAMA,EAAKG,KAAKE,MAAMP,aAAaC,QAAQ,SAC3CC,EAAKC,KAAKZ,GACVS,aAAaI,QAAQ,OAAOC,KAAKC,UAAUJ,IAE/C,EAAKM,SAAS,CACVN,KAAKG,KAAKE,MAAMP,aAAaC,QAAQ,YA5B1B,EA8CnBQ,WAAW,SAACC,GAER,IAAIC,EAAQD,EAAME,OAAOC,aAAa,YAClCC,EAAUT,KAAKE,MAAMP,aAAaC,QAAQ,SAC9Ca,EAAUC,OAAOJ,EAAM,GACvB,EAAKH,SAAS,CAACN,KAAKY,IACpBd,aAAaI,QAAQ,OAAOC,KAAKC,UAAUQ,KApD5B,EAuDnBE,OAAO,aApDJ,EAAKpB,MAAMqB,IAAMC,YACjB,EAAKC,MAAM,CACPjB,KAAK,IALO,E,iFAiCf,IAAMA,EAAOkB,OAAOpB,aAAaC,QAAQ,QACnCoB,EAAahB,KAAKE,MAAML,GAC9B,GAAW,MAARA,EACC,OAAO,EAGPoB,KAAKd,SAAS,CACVN,KAAMmB,IAEVE,QAAQC,IAAIF,KAAKH,MAAMjB,Q,+BAiBrB,IAAD,OACL,OACI,yBAAKuB,UAAU,kBACX,2CACA,6BACA,yBAAKA,UAAU,aACX,2BAAOC,KAAK,OAAOC,YAAY,aAAaC,IAAKN,KAAK1B,QAClD,4BAAQiC,QAASP,KAAKhC,QAASmC,UAAU,UAAzC,OACI,4BAEQH,KAAKH,MAAMjB,KAAK4B,KAAI,SAACC,EAAKpB,GAEtB,OAAO,wBAAIqB,IAAKD,EAAKvC,IAAd,IAAoBuC,EAAKpC,MAChC,4BAAQ8B,UAAU,SAASC,KAAK,SAAS/B,MAAM,SAASsC,WAAUtB,EAAOkB,QAAS,EAAKpB,YAAvF,qB,GA1ErByB,cCQJC,MARf,WACE,OACE,yBAAKV,UAAU,OACd,kBAAC,EAAD,QCIeW,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ff1d4d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\nimport uuid from \"uuid\";\nimport  Css from './CSS/todo.css'\n\n\nclass Todo extends Component {\n\n    constructor(props) {\n        super(props)\n    \n       this.input=React.createRef()\n       this.state={\n           list:[],\n          }\n    }\n\n    addTask=()=>{\n    \n    const Items={\n            id:uuid.v4(),\n            value:this.input.current.value,\n            Date: new Date().toUTCString()\n        };\n\n        if(localStorage.getItem('list')==null){\n            const list=[]\n            list.push(Items);\n            localStorage.setItem(\"list\",JSON.stringify(list))\n        }\n        else{\n            const list=JSON.parse(localStorage.getItem('list'))\n            list.push(Items)\n            localStorage.setItem(\"list\",JSON.stringify(list))\n        }\n        this.setState({\n            list:JSON.parse(localStorage.getItem('list'))\n        });\n    }\n\n    componentDidMount() {\n        const list = window.localStorage.getItem('list');\n        const parsedList = JSON.parse(list);\n        if(list == null){\n            return false\n        }\n        else{\n            this.setState({\n                list: parsedList,\n            })\n            console.log(this.state.list);\n        }\n    }\n    \n    deleteItem=(event)=> {\n        \n        let index = event.target.getAttribute('data-key')\n        let listValue=JSON.parse(localStorage.getItem('list'));\n        listValue.splice(index,1)\n        this.setState({list:listValue});\n        localStorage.setItem('list',JSON.stringify(listValue))\n    }\n\n    update=()=>{\n        \n    }\n    \n    render() {\n        return (\n            <div className=\"main-container\">\n                <h1>Todo App...</h1>\n                <hr/>\n                <div className=\"container\">\n                    <input type=\"text\" placeholder=\"AddTask...\" ref={this.input}></input>\n                        <button onClick={this.addTask} className=\"button\" >Add</button>\n                            <ol>\n                                {\n                                    this.state.list.map((item,index)=>\n                                    {\n                                        return(<li key={item.id}> {item.value}\n                                        <button className=\"button\" type=\"button\" value=\"delete\" data-key={index} onClick={this.deleteItem}>Delete</button></li>)\n                                    })\n                                } \n                            </ol>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default Todo\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './Component/Todo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}